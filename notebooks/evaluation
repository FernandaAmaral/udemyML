{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Avaliação de algoritmos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>clientid</th>\n",
       "      <th>income</th>\n",
       "      <th>age</th>\n",
       "      <th>loan</th>\n",
       "      <th>default</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-1.731185</td>\n",
       "      <td>1.453934</td>\n",
       "      <td>1.365380</td>\n",
       "      <td>1.202819</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-1.729453</td>\n",
       "      <td>-0.762176</td>\n",
       "      <td>0.542659</td>\n",
       "      <td>0.696427</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-1.727721</td>\n",
       "      <td>0.836821</td>\n",
       "      <td>1.674171</td>\n",
       "      <td>1.174711</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-1.725989</td>\n",
       "      <td>-0.183070</td>\n",
       "      <td>0.364136</td>\n",
       "      <td>0.544980</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-1.724257</td>\n",
       "      <td>1.509563</td>\n",
       "      <td>-1.686475</td>\n",
       "      <td>1.420765</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   clientid    income       age      loan  default\n",
       "0 -1.731185  1.453934  1.365380  1.202819        0\n",
       "1 -1.729453 -0.762176  0.542659  0.696427        0\n",
       "2 -1.727721  0.836821  1.674171  1.174711        0\n",
       "3 -1.725989 -0.183070  0.364136  0.544980        0\n",
       "4 -1.724257  1.509563 -1.686475  1.420765        1"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load\n",
    "classes = pd.read_csv('../data/classes.csv')\n",
    "previsores = pd.read_csv('../data/previsores.csv')\n",
    "df = previsores.join(classes)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9255000000000001"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "classificador = GaussianNB()\n",
    "classes = classes.values.ravel()\n",
    "\n",
    "resultados = cross_val_score(classificador, previsores, classes, cv = 10)\n",
    "resultados.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.925"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kfold = StratifiedKFold(n_splits = 10, shuffle = True, random_state = 3)\n",
    "resultados = []\n",
    "matrizes = []\n",
    "for indice_treinamento, indice_teste in kfold.split(previsores,\n",
    "                                                    np.zeros(shape=(previsores.shape[0], 1))):\n",
    "#     print('Índice treinamento: ', indice_treinamento, 'Índice teste: ', indice_teste)\n",
    "    classificador = GaussianNB()\n",
    "    classificador.fit(previsores.iloc[indice_treinamento], classes[indice_treinamento]) \n",
    "    previsoes = classificador.predict(previsores.iloc[indice_teste])\n",
    "    precisao = accuracy_score(classes[indice_teste], previsoes)\n",
    "    resultados.append(precisao)\n",
    "\n",
    "resultados = np.asarray(resultados)\n",
    "resultados.mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Planilha de testes\n",
    "\n",
    "Fazer a média de cada cross validation com 10 *folds*\n",
    "Fazer a média das médias de 30 execuções do k-fold para comparar os classificadores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.925,\n",
       " 0.9235,\n",
       " 0.9265000000000001,\n",
       " 0.925,\n",
       " 0.9259999999999999,\n",
       " 0.9265000000000001,\n",
       " 0.9265000000000001,\n",
       " 0.925,\n",
       " 0.9260000000000002,\n",
       " 0.9260000000000002,\n",
       " 0.924,\n",
       " 0.9260000000000002,\n",
       " 0.9260000000000002,\n",
       " 0.9259999999999999,\n",
       " 0.9280000000000002,\n",
       " 0.9255000000000001,\n",
       " 0.9255000000000001,\n",
       " 0.9269999999999999,\n",
       " 0.9245000000000001,\n",
       " 0.9270000000000002,\n",
       " 0.9259999999999999,\n",
       " 0.924,\n",
       " 0.9275,\n",
       " 0.9265000000000001,\n",
       " 0.9254999999999999,\n",
       " 0.9245000000000001,\n",
       " 0.9259999999999999,\n",
       " 0.9270000000000002,\n",
       " 0.9245000000000001,\n",
       " 0.9245000000000001]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "classificador = GaussianNB()\n",
    "#classificador = DecisionTreeClassifier()\n",
    "#classificador = LogisticRegression()\n",
    "#classificador = SVC(kernel = 'rbf', random_state = 1, C = 2.0)\n",
    "#classificador = KNeighborsClassifier(n_neighbors=5, metric='minkowski', p = 2)\n",
    "#classificador = RandomForestClassifier(n_estimators=40, criterion='entropy', random_state=0)\n",
    "# classificador = MLPClassifier(verbose = True, max_iter = 1000,\n",
    "#                       tol = 0.000010, solver='adam',\n",
    "#                       hidden_layer_sizes=(100), activation = 'relu',\n",
    "#                       batch_size=200, learning_rate_init=0.001)\n",
    "\n",
    "\n",
    "resultados30 = []\n",
    "for i in range(30):\n",
    "    kfold = StratifiedKFold(n_splits=10, shuffle=True, random_state = i)\n",
    "    resultados1 = []\n",
    "    for indice_treinamento, indice_teste in kfold.split(previsores, np.zeros(shape=(classes.shape[0], 1))):\n",
    "        classificador.fit(previsores.iloc[indice_treinamento], classes[indice_treinamento])\n",
    "        previsoes = classificador.predict(previsores.iloc[indice_teste])\n",
    "        precisao = accuracy_score(classes[indice_teste], previsoes)\n",
    "        resultados1.append(precisao)\n",
    "    resultados1 = np.asarray(resultados1)\n",
    "    media = resultados1.mean()\n",
    "    resultados30.append(media)\n",
    "\n",
    "resultados30"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Ranking dos resultados\n",
    "\n",
    "Fazer teste para verificar se os resultados possuem diferença estatística significativa\n",
    "Verificar para cada seed (de 1 a 30) o ranking dos algoritmos."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Naive Bayes</th>\n",
       "      <th>Árvore</th>\n",
       "      <th>Random Forest</th>\n",
       "      <th>Regras</th>\n",
       "      <th>kNN</th>\n",
       "      <th>Logística</th>\n",
       "      <th>SVM</th>\n",
       "      <th>RNA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8</td>\n",
       "      <td>3.5</td>\n",
       "      <td>2.0</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Naive Bayes  Árvore  Random Forest  Regras  kNN  Logística  SVM  RNA\n",
       "0            8     4.0            2.0       6    5          7  3.0    1\n",
       "1            8     3.5            2.0       6    5          7  3.5    1\n",
       "2            8     2.0            3.0       6    5          7  4.0    1\n",
       "3            8     4.0            3.0       6    5          7  2.0    1\n",
       "4            8     3.0            2.0       6    5          7  4.0    1"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ranking = pd.read_csv('../data/ranking.csv')\n",
    "ranking.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Em R:\n",
    "\n",
    "# dados <- read.csv(\"<path do arquivo>\")\n",
    "# matriz <- as.matrix(dados)\n",
    "# TStools::nemenyi(matriz,conf.int=0.95, plottype=\"vline\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x176.4 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import Orange\n",
    "import matplotlib.pyplot as plt\n",
    "# fig = plt.Figure(figsize=(10,10))\n",
    "\n",
    "names = ranking.columns\n",
    "avranks =  ranking.mean(axis = 0) \n",
    "cd = Orange.evaluation.scoring.compute_CD(avranks, 30) #tested on 30 datasets\n",
    "Orange.evaluation.scoring.graph_ranks(avranks, names, cd, width=10, height=10, textspace=1.5)\n",
    "plt.Figure(figsize=(16,16))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Se a subtração do rank (avranks) entre dois algoritmos for maior do que o valor de cd, então um é estatísticamente mais eficiente do que o outro\n",
    "\n",
    "No grafico graph_ranks os algoritmos conectados pela linha não possuem diferença estatística (ex: RNA e Rforest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.9168961904746955\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Naive Bayes      8.000000\n",
       "Árvore           3.600000\n",
       "Random Forest    2.333333\n",
       "Regras           6.000000\n",
       "kNN              4.933333\n",
       "Logística        7.000000\n",
       "SVM              3.133333\n",
       "RNA              1.000000\n",
       "dtype: float64"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(cd)\n",
    "avranks"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Salvando o classificador"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "previsores.drop('clientid', axis=1, inplace=True)\n",
    "X_train, X_test, y_train, y_test = train_test_split(previsores, classes, test_size=0.25, random_state=0)\n",
    "y_train = y_train.values.ravel()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle\n",
    "\n",
    "classificador = RandomForestClassifier(n_estimators=40, criterion='entropy', random_state=0)\n",
    "classificador.fit(X_train, y_train)\n",
    "pickle.dump(classificador, open('../binaries/random_forest.sav', 'wb'))\n",
    "\n",
    "classificador = MLPClassifier(max_iter = 1000,\n",
    "                              tol = 0.000010,\n",
    "                              solver='adam',\n",
    "                              hidden_layer_sizes=(100),\n",
    "                              activation = 'relu',\n",
    "                              batch_size=200,\n",
    "                              learning_rate_init=0.001)\n",
    "classificador.fit(X_train, y_train)\n",
    "pickle.dump(classificador, open('../binaries/RNA.sav', 'wb'))\n",
    "\n",
    "classificador = SVC(kernel = 'rbf', random_state = 1, C = 2.0, probability = True)\n",
    "classificador.fit(X_train, y_train)\n",
    "pickle.dump(classificador, open('../binaries/SVM.sav', 'wb'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Pega o resultado mais frequente entre os modelos para melhorar a resposta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "random_forest_clf = pickle.load(open('../binaries/random_forest.sav', 'rb'))\n",
    "rna_clf = pickle.load(open('../binaries/RNA.sav', 'rb'))\n",
    "svm_clf = pickle.load(open('../binaries/SVM.sav', 'rb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "resposta_svm = svm_clf.predict(X_test)\n",
    "resposta_random_forest = random_forest_clf.predict(X_test)\n",
    "resposta_rna = rna_clf.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [],
   "source": [
    "resposta_final = np.zeros(len(resposta_svm))\n",
    "\n",
    "for i in range(len(resposta_svm)):\n",
    "    arr = [resposta_svm[i], resposta_random_forest[i], resposta_rna[i]]\n",
    "    counts = np.bincount(arr)\n",
    "    resposta_final[i] = np.argmax(counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM: 0.988\n",
      "Random Forest: 0.984\n",
      "RNA: 0.996\n",
      "Final: 0.996\n"
     ]
    }
   ],
   "source": [
    "print('SVM:', accuracy_score(y_test, resposta_svm))\n",
    "print('Random Forest:', accuracy_score(y_test, resposta_random_forest))\n",
    "print('RNA:', accuracy_score(y_test, resposta_rna))\n",
    "print('Final:', accuracy_score(y_test, resposta_final))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Rejeição de classificadores\n",
    "\n",
    "Calcula a probabilidade de a predição estar certa, para definirmos um threshold manual de quão aceitável é o algoritmo errar. Muda dependendo do problema."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [],
   "source": [
    "probabilidade_svm = svm_clf.predict_proba(X_test)\n",
    "probabilidade_rf = random_forest_clf.predict_proba(X_test)\n",
    "probabilidade_rna = rna_clf.predict_proba(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [],
   "source": [
    "resposta_final = np.zeros(len(resposta_svm))\n",
    "threshold = 0.98\n",
    "\n",
    "for i in range(len(resposta_svm)):\n",
    "    arr = []\n",
    "    if(probabilidade_svm[i].any() >= threshold):\n",
    "        arr.append(resposta_svm[i])\n",
    "    if(probabilidade_rf[i].any() >= threshold):\n",
    "        arr.append(resposta_random_forest[i])\n",
    "    if(probabilidade_rf[i].any() >= threshold):\n",
    "        arr.append(resposta_rna[i])\n",
    "    counts = np.bincount(arr)\n",
    "    resposta_final[i] = np.argmax(counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM: 0.988\n",
      "Random Forest: 0.984\n",
      "RNA: 0.996\n",
      "Final: 0.996\n"
     ]
    }
   ],
   "source": [
    "print('SVM:', accuracy_score(y_test, resposta_svm))\n",
    "print('Random Forest:', accuracy_score(y_test, resposta_random_forest))\n",
    "print('RNA:', accuracy_score(y_test, resposta_rna))\n",
    "print('Final:', accuracy_score(y_test, resposta_final))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
